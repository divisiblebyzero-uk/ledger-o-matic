scalar Date

type Account {
    id: ID!,
    accountType: AccountType,
    name: String,
    parentAccount: Account,
    children: [Account],
    currentBalance: Float
}

type Transaction {
    id: ID!,
    transactionDate: Date,
    description: String,
    amount: Int,
    debitAccount: Account,
    creditAccount: Account
}

type AccountLedger {
    ledgerAccount: Account,
    transaction: Transaction,
    ledgerDate: Date,
    description: String,
    debitAmount: Float,
    creditAmount: Float,
    transferAccount: Account,
    runningTotal: Float
}

type AccountTotal {
    account: Account,
    amount: Float
}

type MonthlyAccountTotal {
    month: Date,
    accountTotals: [AccountTotal]
}

type Query {
    accounts:[Account]
    account(id: ID):Account
    topLevelAccounts(accountType: AccountType):[Account]

    transactions:[Transaction]
    transactionsForAccount(accountId: ID):[Transaction]

    accountLedger(accountId: ID, fromDate: Date, toDate: Date):[AccountLedger]

    monthlySummary(fromDate: Date, toDate: Date):[MonthlyAccountTotal]
}

enum AccountType {
    ASSET
    EQUITY
    EXPENSE
    INCOME
    LIABILITY
}